/*
* generated by Xtext
*/
grammar InternalCommand;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.provus.atm.command.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.provus.atm.command.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.provus.atm.command.services.CommandGrammarAccess;

}

@parser::members {
 
 	private CommandGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CommandGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandAccess().getAlternatives()); }
(rule__Command__Alternatives)
{ after(grammarAccess.getCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleENC
entryRuleENC 
:
{ before(grammarAccess.getENCRule()); }
	 ruleENC
{ after(grammarAccess.getENCRule()); } 
	 EOF 
;

// Rule ENC
ruleENC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getENCAccess().getGroup()); }
(rule__ENC__Group__0)
{ after(grammarAccess.getENCAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePASS
entryRulePASS 
:
{ before(grammarAccess.getPASSRule()); }
	 rulePASS
{ after(grammarAccess.getPASSRule()); } 
	 EOF 
;

// Rule PASS
rulePASS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPASSAccess().getGroup()); }
(rule__PASS__Group__0)
{ after(grammarAccess.getPASSAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUSER
entryRuleUSER 
:
{ before(grammarAccess.getUSERRule()); }
	 ruleUSER
{ after(grammarAccess.getUSERRule()); } 
	 EOF 
;

// Rule USER
ruleUSER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUSERAccess().getGroup()); }
(rule__USER__Group__0)
{ after(grammarAccess.getUSERAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Command__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getENCParserRuleCall_0()); }
	ruleENC
{ after(grammarAccess.getCommandAccess().getENCParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getPASSParserRuleCall_1()); }
	rulePASS
{ after(grammarAccess.getCommandAccess().getPASSParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getUSERParserRuleCall_2()); }
	ruleUSER
{ after(grammarAccess.getCommandAccess().getUSERParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getModelAction_0()); }
(

)
{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCommandsAssignment_1()); }
(rule__Model__CommandsAssignment_1)*
{ after(grammarAccess.getModelAccess().getCommandsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ENC__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ENC__Group__0__Impl
	rule__ENC__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ENC__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getENCAccess().getENCAction_0()); }
(

)
{ after(grammarAccess.getENCAccess().getENCAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ENC__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ENC__Group__1__Impl
	rule__ENC__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ENC__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getENCAccess().getENCKeyword_1()); }

	'ENC' 

{ after(grammarAccess.getENCAccess().getENCKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ENC__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ENC__Group__2__Impl
	rule__ENC__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ENC__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getENCAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getENCAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ENC__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ENC__Group__3__Impl
	rule__ENC__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ENC__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getENCAccess().getPassAssignment_3()); }
(rule__ENC__PassAssignment_3)
{ after(grammarAccess.getENCAccess().getPassAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ENC__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ENC__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ENC__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getENCAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getENCAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PASS__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PASS__Group__0__Impl
	rule__PASS__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PASS__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPASSAccess().getPASSAction_0()); }
(

)
{ after(grammarAccess.getPASSAccess().getPASSAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PASS__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PASS__Group__1__Impl
	rule__PASS__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PASS__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPASSAccess().getPasKeyword_1()); }

	'pas' 

{ after(grammarAccess.getPASSAccess().getPasKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PASS__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PASS__Group__2__Impl
	rule__PASS__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PASS__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPASSAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getPASSAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PASS__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PASS__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PASS__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPASSAccess().getPassAssignment_3()); }
(rule__PASS__PassAssignment_3)
{ after(grammarAccess.getPASSAccess().getPassAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__USER__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__USER__Group__0__Impl
	rule__USER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__USER__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUSERAccess().getUSERAction_0()); }
(

)
{ after(grammarAccess.getUSERAccess().getUSERAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__USER__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__USER__Group__1__Impl
	rule__USER__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__USER__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUSERAccess().getUserKeyword_1()); }

	'user' 

{ after(grammarAccess.getUSERAccess().getUserKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__USER__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__USER__Group__2__Impl
	rule__USER__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__USER__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUSERAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getUSERAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__USER__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__USER__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__USER__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUSERAccess().getUserAssignment_3()); }
(rule__USER__UserAssignment_3)
{ after(grammarAccess.getUSERAccess().getUserAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Model__CommandsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_1_0()); }
	ruleCommand{ after(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ENC__PassAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getENCAccess().getPassSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getENCAccess().getPassSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PASS__PassAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPASSAccess().getPassSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getPASSAccess().getPassSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__USER__UserAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUSERAccess().getUserSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getUSERAccess().getUserSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


