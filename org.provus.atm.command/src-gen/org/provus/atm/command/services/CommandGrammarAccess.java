/*
* generated by Xtext
*/
package org.provus.atm.command.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CommandGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cCommandsUSERParserRuleCall_1_0_0 = (RuleCall)cCommandsAssignment_1_0.eContents().get(0);
		private final Assignment cCommandsAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cCommandsPASSParserRuleCall_1_1_0 = (RuleCall)cCommandsAssignment_1_1.eContents().get(0);
		private final Assignment cCommandsAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cCommandsENCParserRuleCall_1_2_0 = (RuleCall)cCommandsAssignment_1_2.eContents().get(0);
		
		//Model:
		//	{Model} (commands+=USER? & commands+=PASS? & commands+=ENC?);
		public ParserRule getRule() { return rule; }

		//{Model} (commands+=USER? & commands+=PASS? & commands+=ENC?)
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//commands+=USER? & commands+=PASS? & commands+=ENC?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//commands+=USER?
		public Assignment getCommandsAssignment_1_0() { return cCommandsAssignment_1_0; }

		//USER
		public RuleCall getCommandsUSERParserRuleCall_1_0_0() { return cCommandsUSERParserRuleCall_1_0_0; }

		//commands+=PASS?
		public Assignment getCommandsAssignment_1_1() { return cCommandsAssignment_1_1; }

		//PASS
		public RuleCall getCommandsPASSParserRuleCall_1_1_0() { return cCommandsPASSParserRuleCall_1_1_0; }

		//commands+=ENC?
		public Assignment getCommandsAssignment_1_2() { return cCommandsAssignment_1_2; }

		//ENC
		public RuleCall getCommandsENCParserRuleCall_1_2_0() { return cCommandsENCParserRuleCall_1_2_0; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cENCParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPASSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUSERParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Command:
		//	ENC | PASS | USER;
		public ParserRule getRule() { return rule; }

		//ENC | PASS | USER
		public Alternatives getAlternatives() { return cAlternatives; }

		//ENC
		public RuleCall getENCParserRuleCall_0() { return cENCParserRuleCall_0; }

		//PASS
		public RuleCall getPASSParserRuleCall_1() { return cPASSParserRuleCall_1; }

		//USER
		public RuleCall getUSERParserRuleCall_2() { return cUSERParserRuleCall_2; }
	}

	public class ENCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ENC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cENCAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cENCKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPassSTRINGTerminalRuleCall_3_0 = (RuleCall)cPassAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ENC:
		//	{ENC} "ENC" "{" pass=STRING "}";
		public ParserRule getRule() { return rule; }

		//{ENC} "ENC" "{" pass=STRING "}"
		public Group getGroup() { return cGroup; }

		//{ENC}
		public Action getENCAction_0() { return cENCAction_0; }

		//"ENC"
		public Keyword getENCKeyword_1() { return cENCKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//pass=STRING
		public Assignment getPassAssignment_3() { return cPassAssignment_3; }

		//STRING
		public RuleCall getPassSTRINGTerminalRuleCall_3_0() { return cPassSTRINGTerminalRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PASSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PASS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPASSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPasKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPassSTRINGTerminalRuleCall_3_0 = (RuleCall)cPassAssignment_3.eContents().get(0);
		
		//PASS:
		//	{PASS} "pas" "=" pass=STRING;
		public ParserRule getRule() { return rule; }

		//{PASS} "pas" "=" pass=STRING
		public Group getGroup() { return cGroup; }

		//{PASS}
		public Action getPASSAction_0() { return cPASSAction_0; }

		//"pas"
		public Keyword getPasKeyword_1() { return cPasKeyword_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//pass=STRING
		public Assignment getPassAssignment_3() { return cPassAssignment_3; }

		//STRING
		public RuleCall getPassSTRINGTerminalRuleCall_3_0() { return cPassSTRINGTerminalRuleCall_3_0; }
	}

	public class USERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "USER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUSERAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUserKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUserAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUserSTRINGTerminalRuleCall_3_0 = (RuleCall)cUserAssignment_3.eContents().get(0);
		
		//USER:
		//	{USER} "user" "=" user=STRING;
		public ParserRule getRule() { return rule; }

		//{USER} "user" "=" user=STRING
		public Group getGroup() { return cGroup; }

		//{USER}
		public Action getUSERAction_0() { return cUSERAction_0; }

		//"user"
		public Keyword getUserKeyword_1() { return cUserKeyword_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//user=STRING
		public Assignment getUserAssignment_3() { return cUserAssignment_3; }

		//STRING
		public RuleCall getUserSTRINGTerminalRuleCall_3_0() { return cUserSTRINGTerminalRuleCall_3_0; }
	}
	
	
	private ModelElements pModel;
	private CommandElements pCommand;
	private ENCElements pENC;
	private PASSElements pPASS;
	private USERElements pUSER;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CommandGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.provus.atm.command.Command".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} (commands+=USER? & commands+=PASS? & commands+=ENC?);
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Command:
	//	ENC | PASS | USER;
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//ENC:
	//	{ENC} "ENC" "{" pass=STRING "}";
	public ENCElements getENCAccess() {
		return (pENC != null) ? pENC : (pENC = new ENCElements());
	}
	
	public ParserRule getENCRule() {
		return getENCAccess().getRule();
	}

	//PASS:
	//	{PASS} "pas" "=" pass=STRING;
	public PASSElements getPASSAccess() {
		return (pPASS != null) ? pPASS : (pPASS = new PASSElements());
	}
	
	public ParserRule getPASSRule() {
		return getPASSAccess().getRule();
	}

	//USER:
	//	{USER} "user" "=" user=STRING;
	public USERElements getUSERAccess() {
		return (pUSER != null) ? pUSER : (pUSER = new USERElements());
	}
	
	public ParserRule getUSERRule() {
		return getUSERAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
