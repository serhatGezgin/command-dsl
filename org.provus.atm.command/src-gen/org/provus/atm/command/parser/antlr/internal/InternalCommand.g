/*
* generated by Xtext
*/
grammar InternalCommand;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.provus.atm.command.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.provus.atm.command.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.provus.atm.command.services.CommandGrammarAccess;

}

@parser::members {

 	private CommandGrammarAccess grammarAccess;
 	
    public InternalCommandParser(TokenStream input, CommandGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CommandGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getModelAccess().getUnorderedGroup_1());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup_1(), 0);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getCommandsUSERParserRuleCall_1_0_0()); 
	    }
		lv_commands_2_0=ruleUSER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_2_0, 
        		"USER");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup_1(), 1);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getCommandsPASSParserRuleCall_1_1_0()); 
	    }
		lv_commands_3_0=rulePASS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_3_0, 
        		"PASS");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup_1(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup_1(), 2);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getCommandsENCParserRuleCall_1_2_0()); 
	    }
		lv_commands_4_0=ruleENC		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_4_0, 
        		"ENC");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup_1());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getModelAccess().getUnorderedGroup_1());
	}

))
;







// Entry rule entryRuleENC
entryRuleENC returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getENCRule()); }
	 iv_ruleENC=ruleENC 
	 { $current=$iv_ruleENC.current; } 
	 EOF 
;

// Rule ENC
ruleENC returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getENCAccess().getENCAction_0(),
            $current);
    }
)	otherlv_1='ENC' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getENCAccess().getENCKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getENCAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		lv_pass_3_0=RULE_STRING
		{
			newLeafNode(lv_pass_3_0, grammarAccess.getENCAccess().getPassSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getENCRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pass",
        		lv_pass_3_0, 
        		"STRING");
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getENCAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulePASS
entryRulePASS returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPASSRule()); }
	 iv_rulePASS=rulePASS 
	 { $current=$iv_rulePASS.current; } 
	 EOF 
;

// Rule PASS
rulePASS returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPASSAccess().getPASSAction_0(),
            $current);
    }
)	otherlv_1='pas' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPASSAccess().getPasKeyword_1());
    }
	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPASSAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_pass_3_0=RULE_STRING
		{
			newLeafNode(lv_pass_3_0, grammarAccess.getPASSAccess().getPassSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPASSRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pass",
        		lv_pass_3_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleUSER
entryRuleUSER returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUSERRule()); }
	 iv_ruleUSER=ruleUSER 
	 { $current=$iv_ruleUSER.current; } 
	 EOF 
;

// Rule USER
ruleUSER returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUSERAccess().getUSERAction_0(),
            $current);
    }
)	otherlv_1='user' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUSERAccess().getUserKeyword_1());
    }
	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUSERAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_user_3_0=RULE_STRING
		{
			newLeafNode(lv_user_3_0, grammarAccess.getUSERAccess().getUserSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUSERRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"user",
        		lv_user_3_0, 
        		"STRING");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


